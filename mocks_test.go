// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package graphql

import (
	"context"
	"sync"
)

var (
	lockExtensionMockExecutionDidStart    sync.RWMutex
	lockExtensionMockGetResult            sync.RWMutex
	lockExtensionMockHasResult            sync.RWMutex
	lockExtensionMockInit                 sync.RWMutex
	lockExtensionMockName                 sync.RWMutex
	lockExtensionMockParseDidStart        sync.RWMutex
	lockExtensionMockResolveFieldDidStart sync.RWMutex
	lockExtensionMockValidationDidStart   sync.RWMutex
)

// Ensure, that ExtensionMock does implement Extension.
// If this is not the case, regenerate this file with moq.
var _ Extension = &ExtensionMock{}

// ExtensionMock is a mock implementation of Extension.
//
//     func TestSomethingThatUsesExtension(t *testing.T) {
//
//         // make and configure a mocked Extension
//         mockedExtension := &ExtensionMock{
//             ExecutionDidStartFunc: func(in1 context.Context) (context.Context, ExecutionFinishFunc) {
// 	               panic("mock out the ExecutionDidStart method")
//             },
//             GetResultFunc: func(in1 context.Context) interface{} {
// 	               panic("mock out the GetResult method")
//             },
//             HasResultFunc: func() bool {
// 	               panic("mock out the HasResult method")
//             },
//             InitFunc: func(in1 context.Context, in2 *Params) context.Context {
// 	               panic("mock out the Init method")
//             },
//             NameFunc: func() string {
// 	               panic("mock out the Name method")
//             },
//             ParseDidStartFunc: func(in1 context.Context) (context.Context, ParseFinishFunc) {
// 	               panic("mock out the ParseDidStart method")
//             },
//             ResolveFieldDidStartFunc: func(in1 context.Context, in2 *ResolveInfo) (context.Context, ResolveFieldFinishFunc) {
// 	               panic("mock out the ResolveFieldDidStart method")
//             },
//             ValidationDidStartFunc: func(in1 context.Context) (context.Context, ValidationFinishFunc) {
// 	               panic("mock out the ValidationDidStart method")
//             },
//         }
//
//         // use mockedExtension in code that requires Extension
//         // and then make assertions.
//
//     }
type ExtensionMock struct {
	// ExecutionDidStartFunc mocks the ExecutionDidStart method.
	ExecutionDidStartFunc func(in1 context.Context) (context.Context, ExecutionFinishFunc)

	// GetResultFunc mocks the GetResult method.
	GetResultFunc func(in1 context.Context) interface{}

	// HasResultFunc mocks the HasResult method.
	HasResultFunc func() bool

	// InitFunc mocks the Init method.
	InitFunc func(in1 context.Context, in2 *Params) context.Context

	// NameFunc mocks the Name method.
	NameFunc func() string

	// ParseDidStartFunc mocks the ParseDidStart method.
	ParseDidStartFunc func(in1 context.Context) (context.Context, ParseFinishFunc)

	// ResolveFieldDidStartFunc mocks the ResolveFieldDidStart method.
	ResolveFieldDidStartFunc func(in1 context.Context, in2 *ResolveInfo) (context.Context, ResolveFieldFinishFunc)

	// ValidationDidStartFunc mocks the ValidationDidStart method.
	ValidationDidStartFunc func(in1 context.Context) (context.Context, ValidationFinishFunc)

	// calls tracks calls to the methods.
	calls struct {
		// ExecutionDidStart holds details about calls to the ExecutionDidStart method.
		ExecutionDidStart []struct {
			// In1 is the in1 argument value.
			In1 context.Context
		}
		// GetResult holds details about calls to the GetResult method.
		GetResult []struct {
			// In1 is the in1 argument value.
			In1 context.Context
		}
		// HasResult holds details about calls to the HasResult method.
		HasResult []struct {
		}
		// Init holds details about calls to the Init method.
		Init []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *Params
		}
		// Name holds details about calls to the Name method.
		Name []struct {
		}
		// ParseDidStart holds details about calls to the ParseDidStart method.
		ParseDidStart []struct {
			// In1 is the in1 argument value.
			In1 context.Context
		}
		// ResolveFieldDidStart holds details about calls to the ResolveFieldDidStart method.
		ResolveFieldDidStart []struct {
			// In1 is the in1 argument value.
			In1 context.Context
			// In2 is the in2 argument value.
			In2 *ResolveInfo
		}
		// ValidationDidStart holds details about calls to the ValidationDidStart method.
		ValidationDidStart []struct {
			// In1 is the in1 argument value.
			In1 context.Context
		}
	}
}

// ExecutionDidStart calls ExecutionDidStartFunc.
func (mock *ExtensionMock) ExecutionDidStart(in1 context.Context) (context.Context, ExecutionFinishFunc) {
	if mock.ExecutionDidStartFunc == nil {
		panic("ExtensionMock.ExecutionDidStartFunc: method is nil but Extension.ExecutionDidStart was just called")
	}
	callInfo := struct {
		In1 context.Context
	}{
		In1: in1,
	}
	lockExtensionMockExecutionDidStart.Lock()
	mock.calls.ExecutionDidStart = append(mock.calls.ExecutionDidStart, callInfo)
	lockExtensionMockExecutionDidStart.Unlock()
	return mock.ExecutionDidStartFunc(in1)
}

// ExecutionDidStartCalls gets all the calls that were made to ExecutionDidStart.
// Check the length with:
//     len(mockedExtension.ExecutionDidStartCalls())
func (mock *ExtensionMock) ExecutionDidStartCalls() []struct {
	In1 context.Context
} {
	var calls []struct {
		In1 context.Context
	}
	lockExtensionMockExecutionDidStart.RLock()
	calls = mock.calls.ExecutionDidStart
	lockExtensionMockExecutionDidStart.RUnlock()
	return calls
}

// GetResult calls GetResultFunc.
func (mock *ExtensionMock) GetResult(in1 context.Context) interface{} {
	if mock.GetResultFunc == nil {
		panic("ExtensionMock.GetResultFunc: method is nil but Extension.GetResult was just called")
	}
	callInfo := struct {
		In1 context.Context
	}{
		In1: in1,
	}
	lockExtensionMockGetResult.Lock()
	mock.calls.GetResult = append(mock.calls.GetResult, callInfo)
	lockExtensionMockGetResult.Unlock()
	return mock.GetResultFunc(in1)
}

// GetResultCalls gets all the calls that were made to GetResult.
// Check the length with:
//     len(mockedExtension.GetResultCalls())
func (mock *ExtensionMock) GetResultCalls() []struct {
	In1 context.Context
} {
	var calls []struct {
		In1 context.Context
	}
	lockExtensionMockGetResult.RLock()
	calls = mock.calls.GetResult
	lockExtensionMockGetResult.RUnlock()
	return calls
}

// HasResult calls HasResultFunc.
func (mock *ExtensionMock) HasResult() bool {
	if mock.HasResultFunc == nil {
		panic("ExtensionMock.HasResultFunc: method is nil but Extension.HasResult was just called")
	}
	callInfo := struct {
	}{}
	lockExtensionMockHasResult.Lock()
	mock.calls.HasResult = append(mock.calls.HasResult, callInfo)
	lockExtensionMockHasResult.Unlock()
	return mock.HasResultFunc()
}

// HasResultCalls gets all the calls that were made to HasResult.
// Check the length with:
//     len(mockedExtension.HasResultCalls())
func (mock *ExtensionMock) HasResultCalls() []struct {
} {
	var calls []struct {
	}
	lockExtensionMockHasResult.RLock()
	calls = mock.calls.HasResult
	lockExtensionMockHasResult.RUnlock()
	return calls
}

// Init calls InitFunc.
func (mock *ExtensionMock) Init(in1 context.Context, in2 *Params) context.Context {
	if mock.InitFunc == nil {
		panic("ExtensionMock.InitFunc: method is nil but Extension.Init was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *Params
	}{
		In1: in1,
		In2: in2,
	}
	lockExtensionMockInit.Lock()
	mock.calls.Init = append(mock.calls.Init, callInfo)
	lockExtensionMockInit.Unlock()
	return mock.InitFunc(in1, in2)
}

// InitCalls gets all the calls that were made to Init.
// Check the length with:
//     len(mockedExtension.InitCalls())
func (mock *ExtensionMock) InitCalls() []struct {
	In1 context.Context
	In2 *Params
} {
	var calls []struct {
		In1 context.Context
		In2 *Params
	}
	lockExtensionMockInit.RLock()
	calls = mock.calls.Init
	lockExtensionMockInit.RUnlock()
	return calls
}

// Name calls NameFunc.
func (mock *ExtensionMock) Name() string {
	if mock.NameFunc == nil {
		panic("ExtensionMock.NameFunc: method is nil but Extension.Name was just called")
	}
	callInfo := struct {
	}{}
	lockExtensionMockName.Lock()
	mock.calls.Name = append(mock.calls.Name, callInfo)
	lockExtensionMockName.Unlock()
	return mock.NameFunc()
}

// NameCalls gets all the calls that were made to Name.
// Check the length with:
//     len(mockedExtension.NameCalls())
func (mock *ExtensionMock) NameCalls() []struct {
} {
	var calls []struct {
	}
	lockExtensionMockName.RLock()
	calls = mock.calls.Name
	lockExtensionMockName.RUnlock()
	return calls
}

// ParseDidStart calls ParseDidStartFunc.
func (mock *ExtensionMock) ParseDidStart(in1 context.Context) (context.Context, ParseFinishFunc) {
	if mock.ParseDidStartFunc == nil {
		panic("ExtensionMock.ParseDidStartFunc: method is nil but Extension.ParseDidStart was just called")
	}
	callInfo := struct {
		In1 context.Context
	}{
		In1: in1,
	}
	lockExtensionMockParseDidStart.Lock()
	mock.calls.ParseDidStart = append(mock.calls.ParseDidStart, callInfo)
	lockExtensionMockParseDidStart.Unlock()
	return mock.ParseDidStartFunc(in1)
}

// ParseDidStartCalls gets all the calls that were made to ParseDidStart.
// Check the length with:
//     len(mockedExtension.ParseDidStartCalls())
func (mock *ExtensionMock) ParseDidStartCalls() []struct {
	In1 context.Context
} {
	var calls []struct {
		In1 context.Context
	}
	lockExtensionMockParseDidStart.RLock()
	calls = mock.calls.ParseDidStart
	lockExtensionMockParseDidStart.RUnlock()
	return calls
}

// ResolveFieldDidStart calls ResolveFieldDidStartFunc.
func (mock *ExtensionMock) ResolveFieldDidStart(in1 context.Context, in2 *ResolveInfo) (context.Context, ResolveFieldFinishFunc) {
	if mock.ResolveFieldDidStartFunc == nil {
		panic("ExtensionMock.ResolveFieldDidStartFunc: method is nil but Extension.ResolveFieldDidStart was just called")
	}
	callInfo := struct {
		In1 context.Context
		In2 *ResolveInfo
	}{
		In1: in1,
		In2: in2,
	}
	lockExtensionMockResolveFieldDidStart.Lock()
	mock.calls.ResolveFieldDidStart = append(mock.calls.ResolveFieldDidStart, callInfo)
	lockExtensionMockResolveFieldDidStart.Unlock()
	return mock.ResolveFieldDidStartFunc(in1, in2)
}

// ResolveFieldDidStartCalls gets all the calls that were made to ResolveFieldDidStart.
// Check the length with:
//     len(mockedExtension.ResolveFieldDidStartCalls())
func (mock *ExtensionMock) ResolveFieldDidStartCalls() []struct {
	In1 context.Context
	In2 *ResolveInfo
} {
	var calls []struct {
		In1 context.Context
		In2 *ResolveInfo
	}
	lockExtensionMockResolveFieldDidStart.RLock()
	calls = mock.calls.ResolveFieldDidStart
	lockExtensionMockResolveFieldDidStart.RUnlock()
	return calls
}

// ValidationDidStart calls ValidationDidStartFunc.
func (mock *ExtensionMock) ValidationDidStart(in1 context.Context) (context.Context, ValidationFinishFunc) {
	if mock.ValidationDidStartFunc == nil {
		panic("ExtensionMock.ValidationDidStartFunc: method is nil but Extension.ValidationDidStart was just called")
	}
	callInfo := struct {
		In1 context.Context
	}{
		In1: in1,
	}
	lockExtensionMockValidationDidStart.Lock()
	mock.calls.ValidationDidStart = append(mock.calls.ValidationDidStart, callInfo)
	lockExtensionMockValidationDidStart.Unlock()
	return mock.ValidationDidStartFunc(in1)
}

// ValidationDidStartCalls gets all the calls that were made to ValidationDidStart.
// Check the length with:
//     len(mockedExtension.ValidationDidStartCalls())
func (mock *ExtensionMock) ValidationDidStartCalls() []struct {
	In1 context.Context
} {
	var calls []struct {
		In1 context.Context
	}
	lockExtensionMockValidationDidStart.RLock()
	calls = mock.calls.ValidationDidStart
	lockExtensionMockValidationDidStart.RUnlock()
	return calls
}
